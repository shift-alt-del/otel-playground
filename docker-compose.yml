version: "3.7"
services:
  jaeger:
    image: jaegertracing/all-in-one:latest
    hostname: jaeger
    container_name: jaeger
    ports:
      - 6831:6831/udp
      - 16686:16686
      - 14250:14250
    networks:
      - tracingdemo
  collector:
    image: otel/opentelemetry-collector:latest
    container_name: collector
    hostname: collector
    command: ["--config=/otel-collector-config.yml"]
    volumes:
      - ./otel-collector-config.yml:/otel-collector-config.yml
    ports:
      - 4317:4317
    depends_on:
      - jaeger
    networks:
      - tracingdemo

  zookeeper:
    image: zookeeper:3.4.9
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zoo:2888:3888
    networks:
      - tracingdemo

  broker:
    image: confluentinc/cp-kafka:5.5.0
    hostname: broker
    container_name: broker
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://broker:19092,LISTENER_DOCKER_EXTERNAL://broker:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_OPTS: "-javaagent:/tmp/jmx_prometheus_javaagent-0.17.0.jar=9999:/tmp/metrics/prometheus/broker.yml"
    volumes:
      - ./agents/opentelemetry-javaagent.jar:/tmp/opentelemetry-javaagent.jar
      - ./agents/jmx_prometheus_javaagent-0.17.0.jar:/tmp/jmx_prometheus_javaagent-0.17.0.jar
      - ./metrics/:/tmp/metrics/
    depends_on:
      - zookeeper
    networks:
      - tracingdemo

  schema-registry:
    image: confluentinc/cp-schema-registry:7.1.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - zookeeper
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://broker:19092"
      SCHEMA_REGISTRY_OPTS: "-javaagent:/tmp/opentelemetry-javaagent.jar -javaagent:/tmp/jmx_prometheus_javaagent-0.17.0.jar=9999:/tmp/metrics/prometheus/sr.yml"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://collector:4317"
      OTEL_RESOURCE_ATTRIBUTES: "service.name=schema-registry"
    volumes:
      - ./agents/opentelemetry-javaagent.jar:/tmp/opentelemetry-javaagent.jar
      - ./agents/jmx_prometheus_javaagent-0.17.0.jar:/tmp/jmx_prometheus_javaagent-0.17.0.jar
      - ./confluent-hub-components/:/usr/share/kafka/plugins/
      - ./metrics/:/tmp/metrics/
    networks:
      - tracingdemo

  ksqldb-server:
    image: confluentinc/ksqldb-server:0.25.1
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - broker
    volumes:
      - ./agents/opentelemetry-javaagent.jar:/tmp/opentelemetry-javaagent.jar
      - ./agents/jmx_prometheus_javaagent-0.17.0.jar:/tmp/jmx_prometheus_javaagent-0.17.0.jar
      - ./confluent-hub-components/:/usr/share/kafka/plugins/
      - ./metrics/:/tmp/metrics/
    ports:
      - "8088:8088"
    environment:
      KSQL_BOOTSTRAP_SERVERS: "broker:19092"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'

      KSQL_CONNECT_GROUP_ID: "ksql-connect-cluster"
      KSQL_CONNECT_BOOTSTRAP_SERVERS: "broker:9092"
      KSQL_CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      KSQL_CONNECT_VALUE_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      KSQL_CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_CONNECT_CONFIG_STORAGE_TOPIC: "_ksql-connect-configs"
      KSQL_CONNECT_OFFSET_STORAGE_TOPIC: "_ksql-connect-offsets"
      KSQL_CONNECT_STATUS_STORAGE_TOPIC: "_ksql-connect-statuses"
      KSQL_CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      KSQL_CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      KSQL_CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      KSQL_CONNECT_PLUGIN_PATH: "/usr/share/kafka/plugins"

      # Setup OpenTelemetry
      KSQL_OPTS: "-javaagent:/tmp/opentelemetry-javaagent.jar -javaagent:/tmp/jmx_prometheus_javaagent-0.17.0.jar=9999:/tmp/metrics/prometheus/ksqldb.yml"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://collector:4317"
      OTEL_RESOURCE_ATTRIBUTES: "service.name=ksql"

    networks:
      - tracingdemo

  ksqldb-cli:
    image: confluentinc/ksqldb-cli:0.25.1
    container_name: ksqldb-cli
    depends_on:
      - broker
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true
    volumes:
      - ./agents/opentelemetry-javaagent.jar:/tmp/opentelemetry-javaagent.jar
      - ./confluent-hub-components/:/usr/share/kafka/plugins/
      - ./metrics/:/tmp/metrics/
    environment:
      KSQL_OPTS: "-javaagent:/tmp/opentelemetry-javaagent.jar"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://collector:4317"
      OTEL_RESOURCE_ATTRIBUTES: "service.name=ksql-client"
    networks:
      - tracingdemo

  mysql:
    image: mysql:8.0.19
    hostname: mysql
    container_name: mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: mysql-pw
      MYSQL_DATABASE: example-db
      MYSQL_USER: example-user
      MYSQL_PASSWORD: example-pw
    volumes:
      - "./mysql/custom-config.cnf:/etc/mysql/conf.d/custom-config.cnf"
    networks:
      - tracingdemo

  mysqld-exporter:
    image: prom/mysqld-exporter
    hostname: mysqld_exporter
    container_name: mysqld_exporter
    ports:
      - "9104:9104"
    environment:
      DATA_SOURCE_NAME: "root:mysql-pw@(mysql:3306)/"
    networks:
      - tracingdemo

  web:
    container_name: web
    image: shift-alt-del/otel-demo-python
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
    ports:
      - "5001:5001"
    command: "gunicorn --bind 0.0.0.0:5001 web:app"
    environment:
      DEMO_BOOTSTRAP_SERVER: "broker:19092"
    depends_on:
      - broker
    networks:
      - tracingdemo

  app1:
    container_name: app1
    image: shift-alt-del/otel-demo-python
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
    command: "python3 /app/kafka_app.py"
    environment:
      DEMO_BOOTSTRAP_SERVER: "broker:19092"
    depends_on:
      - web
    networks:
      - tracingdemo

  prometheus:
    container_name: prometheus
    hostname: prometheus
    image: prom/prometheus:v2.1.0
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    networks:
      - tracingdemo

  grafana:
    container_name: grafana
    hostname: grafana
    image: grafana/grafana:latest
    ports:
      - 3000:3000
    networks:
      - tracingdemo

networks:
  tracingdemo:
